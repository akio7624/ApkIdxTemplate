//------------------------------------------------
//--- 010 Editor v14.0.1 Binary Template
//
//      File: APK.bt
//   Authors: akio7624
//   Version: 1.1
//   Purpose: Parse APK archives found in some console games (not Android APKs)
//  Category: Game
// File Mask: *.apk
//  ID Bytes: 45 4E 44 49 4C 54 4C 45  // ENDILTLE
//   History: 
//   1.0   2024-10-31 Initial release
//   1.1   2024-11-01 Newly identified items have been incorporated
//
//------------------------------------------------
//
// For detailed file structure information,
// please refer to https://github.com/akio7624/ymtools/blob/master/README_en.md
//
// This template was created based on the QuickBMS script dragon_ball_z_boz.bms and
// the author's analysis.
// Although not all fields have been fully analyzed,
// there should be no issues with extracting or packing files.
// If you'd like to share additional information, please send an email to akio7624@proton.me
// https://github.com/akio7624/ApkIdxTemplate
// 
// 
// table header: cLtGreen
// table padding, size: cLtAqua
// ROOT files padding: cDkAqua
// archive padding: cAqua
// unknown: cLtGray
// hash, zero: cSilver



// ===================================== common struct =====================================
struct _ENDILTLE {
    char SIGNATURE[8] <bgcolor=cLtGreen>;
    byte padding[8] <bgcolor=cLtAqua>;
};

struct _PACKHEDR {
    char SIGNATURE[8] <bgcolor=cLtGreen>;
    uint64 TABLE_SIZE <bgcolor=cLtAqua>;
    byte unknown_1[8] <bgcolor=cLtGray>;
    uint32 FILE_LIST_OFFSET <format=hex, bgcolor=cLtRed>;
    uint32 ARCHIVE_PADDING_TYPE <bgcolor=cLtPurple, comment=MakeArchivePaddingTypeComment(this)>;
    byte HASH[16] <format=hex, bgcolor=cSilver>;
};

struct _TOC_SEGMENT {
    uint32 IDENTIFIER <fgcolor=cWhite, bgcolor=cDkPurple, comment=MakeTocIdentifierComment(this)>;
    uint32 NAME_IDX <bgcolor=0x8d917a, comment=GetFnameFromNameIdx(this)>;
    byte ZERO[8] <bgcolor=0xa7b193>;
    uint64 FILE_OFFSET <format=hex, bgcolor=0xa2c299>;
    uint64 FILE_SIZE <bgcolor=0x97d1ad>;
    uint64 FILE_ZSIZE <bgcolor=0xb8fedb>;
};

struct _PACKTOC {
    char SIGNATURE[8] <bgcolor=cLtGreen>;
    uint64 TABLE_SIZE <bgcolor=cLtAqua>;
    uint32 TOC_SEG_SIZE <bgcolor=cLtPurple>;
    uint32 TOC_SEG_COUNT <bgcolor=cPurple>;
    byte unknown_1[8] <bgcolor=cLtGray>;
    _TOC_SEGMENT TOC_SEGMENT_LIST[TOC_SEG_COUNT] <comment=Str("Segment for file '%s'", GetFnameFromNameIdx(this.NAME_IDX))>;
};

struct _ARCHIVE_SEGMENT {
    uint32 NAME_IDX <fgcolor=cWhite, bgcolor=cDkPurple, comment=GetFnameFromNameIdx(this)>;
    byte ZERO[4] <bgcolor=0x8d917a>;
    uint64 ARCHIVE_OFFSET <bgcolor=0xa7b193>;
    uint64 ARCHIVE_SIZE <format=hex, bgcolor=0xa2c299>;
    byte ARCHIVE_HASH[16] <format=hex, bgcolor=0xb8fedb>;
};

struct _PACKFSLS {
    char SIGNATURE[8] <bgcolor=cLtGreen>;
    uint64 TABLE_SIZE <bgcolor=cLtAqua>;
    uint32 ARCHIVE_SEG_COUNT <bgcolor=cPurple>;
    uint32 ARCHIVE_SEG_SIZE <bgcolor=cLtPurple>;
    byte unknown_1[8] <bgcolor=cLtGray>;
    _ARCHIVE_SEGMENT ARCHIVE_SEGMENT_LIST[ARCHIVE_SEG_COUNT] <comment=Str("Segment for archive '%s'", GetFnameFromNameIdx(this.NAME_IDX))>;
};

struct FILENAME {
    string fname;
};

struct _GENESTRT {
    char SIGNATURE[8] <bgcolor=cLtGreen>;
    uint64 TABLE_SIZE_1 <bgcolor=cLtAqua>;
    uint32 FILENAME_COUNT <bgcolor=cPurple>;
    byte unknown_1[4] <bgcolor=cLtGray>;
    uint32 FILE_NAMES_OFFSET <bgcolor=0xe3cfef>;
    uint32 TABLE_SIZE_2 <bgcolor=0xb29aea>;
    uint32 FILENAME_OFFSET_LIST[FILENAME_COUNT] <bgcolor=cLtRed>;
    byte FILENAME_OFFSET_LIST_PADDING[GetTablePaddingCount()] <bgcolor=cLtAqua>;
    FILENAME FILE_NAMES[FILENAME_COUNT] <optimize=false, bgcolor=0xddf6d6, read=(fname)>;
};

struct _GENEEOF {
    char SIGNATURE[8] <bgcolor=cLtGreen>;
    byte padding[8] <bgcolor=cLtAqua>;
};

// ===================================== ARCHIVE-specific structure =====================================

struct _ARCHIVE_FILE_SEGMENT {
    uint32 NAME_IDX <bgcolor=cDkPurple>;
    uint32 ZIP <bgcolor=0x8d917a ,comment=MakeArchiveZipComment(this)>;
    uint64 FILE_OFFSET <format=hex, bgcolor=0xa7b193>;
    uint64 FILE_SIZE <bgcolor=0xa2c299>;
    uint64 FILE_ZSIZE <bgcolor=0x97d1ad>;
};

struct _PACKFSHD {
    char SIGNATURE[8] <bgcolor=cLtGreen>;
    uint64 TABLE_SIZE <bgcolor=cLtAqua>;
    byte unknown_1[4] <bgcolor=cLtGray>;
    uint32 FILE_SEG_SIZE <bgcolor=cLtPurple>;
    uint32 FILE_SEG_COUNT <bgcolor=cPurple>;
    uint32 FILE_SEG_SIZE2 <bgcolor=cLtPurple>;
    uint32 unknown_2 <bgcolor=cLtGray>;
    byte unknown_3[12] <bgcolor=cLtGray>;
    _ARCHIVE_FILE_SEGMENT ARCHIVE_FILE_SEGMENT[FILE_SEG_COUNT] <comment=Str("Segment for file '%s'", GetArchiveFnameFromNameIdx(parentof(parentof(this)).GENESTRT, this.NAME_IDX))>;
};

// ==================================================================================



// ===================================== method =====================================

// Calculate the padding for all tables except for ENDILTLE, PACKHEDR, and GENEEOF.
// When viewing in a hex viewer in 16-byte units, pad the end of each table with 00 so that the last line is fully filled.
uint64 GetTablePaddingCount() {
    local uint64 current = FTell();
    if(current % 16 == 0) return 0;
    
    return 16 - (current % 16);
}


// Padding the file from the beginning to be a multiple of 2048, including TABLE END PADDING.
uint64 GetHeaderEndPadding() {
    local uint64 size = FTell();
    
    if(size % 2048 == 0) { return 0; }
    
    local uint64 n = (size / 2048);
    local int64 block_size = 0;
    
    while(true){
        block_size = (n * 2048);
        if(size <= block_size) {
            return block_size - size;
        }
        
        n++;
    }
}


// Calculate the amount of padding needed to ensure that the sum of the sizes of the ROOT files
// and ROOT_FILES_PADDING is a multiple of 2048.
uint64 GetRootFilesPadding(uint64 size) {
    if(size % 2048 == 0) { return 0; }
    
    local uint64 n = (size / 2048);
    local int64 block_size = 0;
    
    while(true){
        block_size = (n * 2048);
        if(size <= block_size) {
            return block_size - size;
        }
        
        n++;
    }
}


// Receive the unpadded size of a root file or archive, then calculate and return the size including padding.
uint64 GetRootFileBlockSize(uint64 size) {
    if(size % 512 == 0) { return size; }
    
    local uint64 n = (size / 512);
    local int64 block_size = 0;
    
    while(true){
        block_size = (n * 512);
        if(size <= block_size) {
            return block_size;
        }
        
        n++;
    }
}


// Calculate the block size of the archive based on the value of ARCHIVE_PADDING_TYPE.
uint64 GetArchiveBlockSize(uint64 size) {
    local int UNIT = (PACKHEDR.ARCHIVE_PADDING_TYPE == 1) ? 2048 : 512;
    
    if(size % UNIT == 0) { return size; }
    
    local uint64 n = (size / UNIT);
    local int64 block_size = 0;
    
    while(true){
        block_size = (n * UNIT);
        if(size <= block_size) {
            return block_size;
        }
        
        n++;
    }
}


// Calculate the padding for files included in the archive.
// Receive the unpadded file size and return the size including padding.
int64 GetArchiveFileBlockSize(uint64 size) {
    if(size % 16 == 0) {
        return size;
    } else {
        return size + (16 - (size % 16));
    }
}


// Add comments to explain the meaning of the IDENTIFIER value in TOC_SEGMENT.
string MakeTocIdentifierComment(uint32 identifier) {
    if(identifier == 0) {
        return "Uncompressed file (raw)";
    }else if(identifier == 1) {
        return "Assumed to be a directory";
    }else if(identifier == 512) {
        return "File compressed with zlib.";
    }else{
        return Str("%d is an unknown IDENTIFIER. Please report it.", identifier);
    }
}


// Find and return the root file's name in the GENESTRT table using NAME_IDX.
string GetFnameFromNameIdx(uint32 name_idx) {
    local string fname = GENESTRT.FILE_NAMES[name_idx].fname;
    if(Strcmp(fname, "") == 0){
        return "(empty string)";
    }else {
        return fname;
    }
}


// Add comments to explain the meaning of the ZIP value in the archive file.
string MakeArchiveZipComment(uint32 zip) {
    if(zip == 0) {
        return "Uncompressed file (raw)";
    }else if(zip == 2) {
        return "File compressed with zlib.";
    }else{
        return Str("%d is an unknown ZIP. Please report it.", zip);
    }
}


//Find and return the name of the file included in the archive by using NAME_IDX in the archive's GENESTRT table.
string GetArchiveFnameFromNameIdx(_GENESTRT &genestrt, uint32 name_idx) {
    local string fname = genestrt.FILE_NAMES[name_idx].fname;
    
    if(Strcmp(fname, "") == 0){
        return "(empty string)";
    }else {
        return fname;
    }
}


// Comment on ARCHIVE_PADDING_TYPE.
string MakeArchivePaddingTypeComment(uint32 typ) {
    if(typ == 1) {
        return "Pad the archive to 2048 bytes.";
    }else if(typ == 2) {
        return "Pad the archive to 512 bytes.";
    }else{
        return Str("%d is an unknown ARCHIVE PADDING TYPE. Please report it.", typ);
    }
}
// ==================================================================================



// ===================================== File analysis area. =====================================

local int i = 0;

LittleEndian();  // Use Little Endian

_ENDILTLE ENDILTLE;
Assert(Strcmp(ENDILTLE.SIGNATURE, "ENDILTLE") == 0, "The signature of the `ENDILTLE` table must be 'ENDILTLE'.");

_PACKHEDR PACKHEDR;
Assert(Strcmp(PACKHEDR.SIGNATURE, "PACKHEDR") == 0, "The signature of the `PACKHEDR` table must be 'PACKHEDR'.");

_PACKTOC PACKTOC;
Assert(Strcmp(PACKTOC.SIGNATURE, "PACKTOC ") == 0, "The signature of the `PACKTOC` table must be 'PACKTOC '.");
byte PACKTOC_PADDING[GetTablePaddingCount()] <bgcolor=cLtAqua>;

_PACKFSLS PACKFSLS;
Assert(Strcmp(PACKFSLS.SIGNATURE, "PACKFSLS") == 0, "The signature of the `PACKFSLS` table must be 'PACKFSLS'.");
byte PACKFSLS_PADDING[GetTablePaddingCount()] <bgcolor=cLtAqua>;

_GENESTRT GENESTRT;
Assert(Strcmp(GENESTRT.SIGNATURE, "GENESTRT") == 0, "The signature of the `GENESTRT` table must be 'GENESTRT'.");
byte GENESTRT_PADDING[GetTablePaddingCount()] <bgcolor=cLtAqua>;

_GENEEOF GENEEOF;
Assert(Strcmp(GENEEOF.SIGNATURE, "GENEEOF ") == 0, "The signature of the `GENEEOF` table must be 'GENEEOF '.");

byte TABLE_END_PADDING[GetHeaderEndPadding()] <bgcolor=cLtAqua>;

local uint64 root_files_size = 0;
local uint64 last_root_file[3] = {0, 0, 0}; // offset size, padding_count
struct _FILE_LIST {
    local uint64 FILE_OFFSET, FILE_SIZE, FILE_ZSIZE, real_size, padding_count;
    
    for(i=0; i<PACKTOC.TOC_SEG_COUNT; i++) {
        FILE_OFFSET = PACKTOC.TOC_SEGMENT_LIST[i].FILE_OFFSET;
        FILE_SIZE = PACKTOC.TOC_SEGMENT_LIST[i].FILE_SIZE;
        FILE_ZSIZE = PACKTOC.TOC_SEGMENT_LIST[i].FILE_ZSIZE;
        real_size = (FILE_ZSIZE == 0) ? FILE_SIZE : FILE_ZSIZE;
        
        if(real_size == 0) continue;
        
        root_files_size += real_size;
        
        FSeek(FILE_OFFSET);
    
        padding_count = GetRootFileBlockSize(real_size) - real_size;
        
        if(last_root_file[0] < FILE_OFFSET) {  // The TOC SEGMENT may not be aligned according to the file offset.
            last_root_file[0] = FILE_OFFSET;
            last_root_file[1] = real_size;
            last_root_file[2] = padding_count;
        }
        
        struct _FILE{
            byte data[real_size] <bgcolor=0x72bafb>;
            if(padding_count != 0) {
                byte padding[padding_count] <bgcolor=cLtAqua>;
            }
        } file;
    }
} ROOT_FILES;


if(PACKFSLS.ARCHIVE_SEG_COUNT != 0 && root_files_size != 0) {
    FSeek(last_root_file[0] + last_root_file[1] + last_root_file[2]);  // go to end of ROOT files
    root_files_size = FTell() - PACKHEDR.FILE_LIST_OFFSET;
    byte ROOT_FILES_PADDING[GetRootFilesPadding(root_files_size)] <bgcolor=cDkAqua>;
}


local uint32 NAME_IDX;
local uint64 ARCHIVE_OFFSET, ARCHIVE_SIZE;
for(i=0; i<PACKFSLS.ARCHIVE_SEG_COUNT; i++) {
    NAME_IDX = PACKFSLS.ARCHIVE_SEGMENT_LIST[i].NAME_IDX;
    ARCHIVE_OFFSET = PACKFSLS.ARCHIVE_SEGMENT_LIST[i].ARCHIVE_OFFSET;
    ARCHIVE_SIZE = PACKFSLS.ARCHIVE_SEGMENT_LIST[i].ARCHIVE_SIZE;
    
    FSeek(ARCHIVE_OFFSET);
    
    struct _ARCHIVE {
        local int j = 0;
        _ENDILTLE ENDILTLE;
        Assert(Strcmp(ENDILTLE.SIGNATURE, "ENDILTLE") == 0, "The signature of the `ENDILTLE` table must be 'ENDILTLE'.");

        _PACKFSHD PACKFSHD;
        Assert(Strcmp(PACKFSHD.SIGNATURE, "PACKFSHD") == 0, "The signature of the `PACKFSHD` table must be 'PACKFSHD'.");
        byte PACKFSHD_PADDING[GetTablePaddingCount()] <bgcolor=cLtAqua>;

        _GENESTRT GENESTRT;
        Assert(Strcmp(GENESTRT.SIGNATURE, "GENESTRT") == 0, "The signature of the `GENESTRT` table must be 'GENESTRT'.");
        byte GENESTRT_PADDING[GetTablePaddingCount()] <bgcolor=cLtAqua>;
        
        _GENEEOF GENEEOF;
        
        struct _ARCHIVE_FILE_LIST {
            local int k = 0;
            local uint32 NAME_IDX, ZIP;
            local uint64 FILE_OFFSET, FILE_SIZE, FILE_ZSIZE, real_size, padding_count;
            
            for(k=0; k<PACKFSHD.FILE_SEG_COUNT; k++) {
                NAME_IDX = PACKFSHD.ARCHIVE_FILE_SEGMENT[k].NAME_IDX;
                ZIP = PACKFSHD.ARCHIVE_FILE_SEGMENT[k].ZIP;
                FILE_OFFSET = PACKFSHD.ARCHIVE_FILE_SEGMENT[k].FILE_OFFSET;
                FILE_SIZE = PACKFSHD.ARCHIVE_FILE_SEGMENT[k].FILE_SIZE;
                FILE_ZSIZE = PACKFSHD.ARCHIVE_FILE_SEGMENT[k].FILE_ZSIZE;
                real_size = (ZIP != 2) ? FILE_SIZE : FILE_ZSIZE;
                
                FSeek(ARCHIVE_OFFSET + FILE_OFFSET);  // Important! The offset of files inside the archive is a relative address for each archive.
                
                padding_count = GetArchiveFileBlockSize(real_size) - real_size;
                
                struct _ARCHIVE_FILE{
                    byte data[real_size] <bgcolor=0x72bafb>;
                    if(padding_count != 0) {
                        byte padding[padding_count] <bgcolor=cLtAqua>;
                    }
                } file;
            }
        } ARCHIVE_FILES;
        
        if(!FEof()) {  // The last archive listed does not have any padding.
            byte ARCHIVE_PADDING[GetArchiveBlockSize(ARCHIVE_SIZE) - ARCHIVE_SIZE] <bgcolor=cAqua>;
        }
    } ARCHIVE;
}

// ==================================================================================



Printf("The template execution is complete.\n");